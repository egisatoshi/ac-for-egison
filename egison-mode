define
test
load
load-file
execute
lambda
memoized-lambda
let
letrec
if
apply
generate-array
array-size
array-ref
loop
match
match-lambda
match-all
match-all-lambda
next-match
next-match-lambda
next-match-all
next-match-all-lambda
matcher
matcher-bfs
matcher-dfs
algebraic-data-matcher
pattern-function
do
io
#f
#t
cons
join
seq
undefined
array-size
generate-array
nil
integer
multiset
list
something
snoc
nioj
set
main
modulo
quotient
remainder
neg
abs
eq?
lt?
lte?
gt?
gte?
round
floor
ceiling
truncate
sqrt
exp
log
sin
cos
tan
asin
acos
atan
sinh
cosh
tanh
asinh
acosh
atanh
itof
rtof
read
show
empty?
uncons
unsnoc
bool?
integer?
rational?
char?
tuple?
collection?
array?
hash?
return
open-input-file
open-output-file
close-input-port
close-output-port
read-char
read-line
write-char
write-string
write
eof?
flush
read-char-from-port
read-line-from-port
write-char-to-port
write-string-to-port
write-to-port
eof-port?
flush-port
rand
or
and
not
id
bool
char
string
compose
compose3
map
between
from
repeat
repeat1
filter
separate
concat
foldr
foldl
foldl'
scanl
map2
zip
find-cycle
member?
member?/m
include?
include?/m
any
all
length
count
count/m
frequency
frequency/m
car
cdr
rac
rdc
nth
take-and-drop
take
drop
while
reverse
add
add/m
delete-first
delete-first/m
delete
delete/m
difference
difference/m
union
union/m
intersect
intersect/m
unique
unique/m
print
print-to-port
each
pure-rand
fact
perm
comb
even?
odd?
between?
nat
fib
divisor?
gcd
nats
nats0
primes
find-factor
prime?
power
mod
compare
min
max
min-and-max
split-by-ordering
string?
intersperse
intercalate
split
split/m
palindrome?
qsort
assert
assert-equal
numerator
denominator
